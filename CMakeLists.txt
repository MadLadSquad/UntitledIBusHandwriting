cmake_minimum_required(VERSION 3.21)

if (APPLE)
    message(FATAL_ERROR "You're currently working on an Apple machine! Apple and their platforms are not supported, if
you wish to help with adding support for apple devices, please make pull request on the main engine repository as well
as on the UVKBuildTool repository(this file is generated by it!) and consider maintaining the apple builds!")
endif()

project(UntitledImGuiFramework)
if (NOT WIN32)
    project(UntitledIBusHandwritingLib)
endif()
project(UntitledIBusHandwriting)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_C_STANDARD 99)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/Framework/cmake/")

set(UIMGUI_PLATFORM "DESKTOP" CACHE STRING "Can be set to DESKTOP when building for WIN32, Linux, Mac, etc. ANDROID for
    Android and WEB for WASM")

# ----------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------- Add subdirectories -------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

option(BUILD_VARIANT_STATIC "Builds the Framework, application library(exists only on Unix) and executable into a single
    executable binary" OFF)

option(BUILD_VARIANT_VENDOR "If set to OFF will use the globally installed framework(not available on Windows)" ON)
if (BUILD_VARIANT_VENDOR OR WIN32)
    add_subdirectory(Framework/ThirdParty/glfw)
    set(GLFW_INCLUDE_DIRS "Framework/ThirdParty/glfw/include/")
    set(GLFW_LIBRARIES_T "glfw")
    add_subdirectory(Framework/ThirdParty/glew)
    set(GLEW_INCLUDE_DIRS "Framework/ThirdParty/glew/include")
    if (WIN32)
        set(GLEW_LIBRARIES_T "libglew_static")
        set(OPENGL_LIBRARIES_T "opengl32")
        set(VULKAN_LIBRARIES_T "vulkan-1")
    else()
        set(GLEW_LIBRARIES_T "GLEW")
        set(OPENGL_LIBRARIES_T "OpenGL")
        set(X11_LIBRARIES "X11")
        set(VULKAN_LIBRARIES_T "vulkan")
    endif()
    add_subdirectory(Framework/ThirdParty/vulkan-headers)
    if (NOT BUILD_VARIANT_STATIC)
        set(BUILD_SHARED_LIBS ON)
    endif()
    add_subdirectory(Framework/ThirdParty/freetype)
    set(FREETYPE_LIBRARIES "freetype")
    set(FREETYPE_INCLUDE_DIRS "")
    set(BUILD_SHARED_LIBS OFF)
else()
    find_package(PkgConfig REQUIRED)
    find_package(OpenGL REQUIRED)
    find_package(Freetype REQUIRED)
    if (NOT WIN32)
        find_package(X11 REQUIRED)
    endif()
    # Re-enable when yaml-cpp 0.8 is released
    #if (BUILD_VARIANT_STATIC)
    #    set(YamlCpp_STATIC ON)
    #endif()
    #
    #include(FindYamlCpp)
    #find_package(YamlCpp REQUIRED)
    #set(YAML_CPP_INCLUDE_DIRS_T "${YamlCpp_INCLUDE_PATH}")
    #set(YAML_CPP_LIBRARIES_T "${YamlCpp_LIBRARY}")
    set(OPENGL_LIBRARIES_T "${OPENGL_gl_LIBRARY}")
    pkg_check_modules(GLFW REQUIRED glfw3)
    if (BUILD_VARIANT_STATIC)
        set(GLFW_LIBRARIES_T ${GLFW_STATIC_LIBRARIES})
    else()
        set(GLFW_LIBRARIES_T ${GLFW_LIBRARIES})
    endif()
    pkg_check_modules(GLEW REQUIRED glew)
    if (BUILD_VARIANT_STATIC)
        set(GLEW_LIBRARIES_T ${GLEW_STATIC_LIBRARIES})
    else()
        set(GLEW_LIBRARIES_T ${GLEW_LIBRARIES})
    endif()
    pkg_check_modules(Vulkan REQUIRED vulkan)
    set(VULKAN_LIBRARIES_T ${Vulkan_LINK_LIBRARIES})
endif()

if (NOT BUILD_VARIANT_STATIC)
    set(BUILD_SHARED_LIBS ON)
endif()

add_subdirectory(Framework/ThirdParty/yaml-cpp)
set(YAML_CPP_LIBRARIES_T "yaml-cpp")
set(YAML_CPP_INCLUDE_DIRS_T "Framework/ThirdParty/yaml-cpp/include/yaml-cpp"
        "Framework/ThirdParty/yaml-cpp/include")
set(BUILD_SHARED_LIBS OFF)
add_subdirectory(Framework/Modules/CLIParser/ThirdParty/UntitledCLIParser/ThirdParty/utfcpp)

# Custom section
find_package(PkgConfig REQUIRED)
pkg_check_modules(IBus REQUIRED ibus-1.0)

if(IBus_FOUND)
    include_directories(${IBus_INCLUDE_DIRS})
    link_directories(${IBus_LIBRARY_DIRS})
endif(IBus_FOUND)

# ----------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------- Add compile options ------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

option(USE_OS_MODULE "Use the operating system module" ON)
if (USE_OS_MODULE)
    option(ENABLE_DBUS_UTILS "Compile in additional utility functions that make using the C DBus API safer" OFF)
    option(ENABLE_UEXEC "Compile in the UntitledExec library for a cross-platform method of launching applications" OFF)
    option(ENABLE_THEMING "Compile in the UDE theme integration system for supporting theming in your application" ON)
    option(ENABLE_NOTIFICATIONS "Compile in support for cross platform notifications" OFF)
    option(ENABLE_POLKIT_UTILS "Compile in utilities for dealing with polkit" OFF)
    option(ENABLE_UFONT_UTILS "Compiles in cross-platform utilities for dealing with system fonts" ON)

    if (NOT WIN32)
        option(ENABLE_XDG_BASEDIR "Compile in the UntitledXDGBasedir library for a XDG Basedir implementation" OFF)
    endif()

    if (ENABLE_DBUS_UTILS)
        find_package(PkgConfig REQUIRED)
        pkg_check_modules(DBUS REQUIRED dbus-1)

        link_directories(${DBUS_LIBRARY_DIRS})
        include_directories(${DBUS_INCLUDE_DIRS})
    endif()
    if (ENABLE_UEXEC)
        include_directories("Framework/Modules/OS/ThirdParty/" "Framework/Modules/OS/ThirdParty/uexec")
    endif()
    if (ENABLE_THEMING)

    endif()
    if (ENABLE_NOTIFICATIONS)

    endif()
    if (ENABLE_POLKIT_UTILS)

    endif()
    if (ENABLE_UFONT_UTILS)
        find_package(Fontconfig REQUIRED)
    endif()
endif()

option(USE_I18N_MODULE "Use the i18n module" ON)
option(USE_UNDO_MODULE "Use the Undo/Redo module" OFF)

# Styling and GUI widgets modules
option(USE_PLOTTING_MODULE "Use the plotting module" OFF)
option(USE_KNOBS_MODULE "Use the knobs module" OFF)
option(USE_SPINNER_MODULE "Use the spinners module" OFF)
option(USE_TOGGLES_MODULE "Use the toggles module" OFF)
option(USE_TEXT_UTILS_MODULE "Use the text utils module" OFF)
option(USE_CLI_PARSER_MODULE "Use the CLI Parser module" OFF)

# ----------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------- Add files and directories ---------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

include_directories("Source/" "Framework/" "Framework/ThirdParty/imgui/core/" "Framework/ThirdParty/imgui/backends/"
        "Framework/ThirdParty/imgui/misc/" "Framework/ThirdParty/imgui/" "Framework/Core/" "Framework/Renderer/"
        "Framework/ThirdParty/logger/src/" "Framework/ThirdParty/source-libraries/" "Framework/Modules" "."
        "Framework/Modules/CLIParser/ThirdParty/UntitledCLIParser/ThirdParty/"  ${YAML_CPP_INCLUDE_DIRS_T}
        "Framework/ThirdParty/vulkan-headers/include" ${GLFW_INCLUDE_DIRS} ${GLEW_INCLUDE_DIRS} ${FREETYPE_INCLUDE_DIRS}
        )


link_directories("ThirdParty/glew/lib" "Framework/ThirdParty/vulkan" UVKBuildTool/build)

if (UIMGUI_PLATFORM STREQUAL "DESKTOP")
    file(GLOB_RECURSE IMGUI_SRC "Framework/ThirdParty/imgui/backends/imgui_impl_glfw.cpp"
            "Framework/ThirdParty/imgui/backends/imgui_impl_opengl3.cpp"
            "Framework/ThirdParty/imgui/backends/imgui_impl_vulkan.cpp")

    file(GLOB_RECURSE IMGUI_HEAD "Framework/ThirdParty/imgui/backends/imgui_impl_glfw.h"
            "Framework/ThirdParty/imgui/backends/imgui_impl_opengl3.h"
            "Framework/ThirdParty/imgui/backends/imgui_impl_vulkan.h"
            "Framework/ThirdParty/imgui/backends/imgui_impl_opengl3_loader.h")
elseif(UIMGUI_PLATFORM STREQUAL "ANDROID")
    file(GLOB_RECURSE IMGUI_SRC "Framework/ThirdParty/imgui/backends/imgui_impl_android.cpp"
            "Framework/ThirdParty/imgui/backends/imgui_impl_opengl3.cpp"
            "Framework/ThirdParty/imgui/backends/imgui_impl_vulkan.cpp")

    file(GLOB_RECURSE IMGUI_HEAD "Framework/ThirdParty/imgui/backends/imgui_impl_android.h"
            "Framework/ThirdParty/imgui/backends/imgui_impl_opengl3.h"
            "Framework/ThirdParty/imgui/backends/imgui_impl_vulkan.h"
            "Framework/ThirdParty/imgui/backends/imgui_impl_opengl3_loader.h")
elseif (UIMGUI_PLATFORM STREQUAL "WEB")
    file(GLOB_RECURSE IMGUI_SRC "Framework/ThirdParty/imgui/backends/imgui_impl_glfw.cpp"
            "Framework/ThirdParty/imgui/backends/imgui_impl_opengl3.cpp"
            "Framework/ThirdParty/imgui/backends/imgui_impl_wgpu.cpp")

    file(GLOB_RECURSE IMGUI_HEAD "Framework/ThirdParty/imgui/backends/imgui_impl_glfw.h"
            "Framework/ThirdParty/imgui/backends/imgui_impl_opengl3.h"
            "Framework/ThirdParty/imgui/backends/imgui_impl_wgpu.h"
            "Framework/ThirdParty/imgui/backends/imgui_impl_opengl3_loader.h")
else()
    message(FATAL_ERROR "The UIMGUI_PLATFORM variable is not set to a compatible value!")
endif()

file(GLOB_RECURSE UGUI_SRC "Framework/Core/*.cpp" "Framework/Renderer/*.cpp" ${IMGUI_SRC}
        "Framework/ThirdParty/imgui/core/*.cpp" "Framework/ThirdParty/imgui/misc/cpp/*.cpp" "Framework/C/*.cpp"
        "Framework/ThirdParty/imgui/misc/freetype/*.cpp" "Framework/ThirdParty/logger/*.cpp"
        "Framework/ThirdParty/source-libraries/*.cpp" "Framework/Modules/i18n/src/*.cpp" "Framework/Modules/Modules.hpp"
        "Framework/Modules/Undo/src/*.cpp" "Framework/Modules/Manager/*.cpp" "Framework/Modules/OS/src/*.cpp")
file(GLOB_RECURSE UGUI_HEAD "Framework/Core/*.hpp" "Framework/Renderer/*.hpp" ${IMGUI_HEAD}
        "Framework/ThirdParty/imgui/core/*.h" "Framework/ThirdParty/imgui/misc/cpp/*.h" "Framework/C/*.h"
        "Framework/ThirdParty/imgui/misc/freetype/*.h" "Framework/ThirdParty/logger/*.h" "Framework/C/*.hpp"
        "Framework/ThirdParty/source-libraries/*.h" "Framework/ThirdParty/source-libraries/*.hpp"
        "Framework/Modules/i18n/src/*.hpp" "Framework/Modules/Undo/src/*.hpp" "Framework/Modules/Manager/*.hpp"
        "Framework/Modules/OS/src/*.h" "Framework/Modules/OS/src/*.hpp")
file(GLOB_RECURSE UGUI_APP_SRC "Source/*.cpp")
file(GLOB_RECURSE UGUI_APP_HEAD "Source/*.hpp" "Generated/Config.hpp")
file(GLOB_RECURSE EXEC_SRC "")

# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------- Modify files for modules ---------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

if (USE_CLI_PARSER_MODULE)
    file(GLOB_RECURSE UGUI_CLI_SRC "Framework/Modules/CLIParser/ThirdParty/UntitledCLIParser/C/*.cpp"
            "Framework/Modules/CLIParser/ThirdParty/UntitledCLIParser/CLIParser.cpp")
    file(GLOB_RECURSE UGUI_CLI_HEAD "Framework/Modules/CLIParser/ThirdParty/UntitledCLIParser/C/*.h"
            "Framework/Modules/CLIParser/ThirdParty/UntitledCLIParser/CLIParser.hpp" "Framework/Modules/CLIParser/Common.h")
else()
    file(GLOB_RECURSE UGUI_CLI_SRC )
    file(GLOB_RECURSE UGUI_CLI_HEAD )
endif()

if (USE_PLOTTING_MODULE)
    file(GLOB_RECURSE UGUI_IMPLOT_SRC "Framework/Modules/Plotting/*.cpp")
    file(GLOB_RECURSE UGUI_IMPLOT_HEAD "Framework/Modules/Plotting/*.hpp")
else()
    file(GLOB_RECURSE UGUI_IMPLOT_SRC )
    file(GLOB_RECURSE UGUI_IMPLOT_HEAD )
endif()

if (USE_KNOBS_MODULE)
    file(GLOB_RECURSE UGUI_KNOBS_SRC "Framework/Modules/Knobs/*.cpp")
    file(GLOB_RECURSE UGUI_KNOBS_HEAD "Framework/Modules/Knobs/*.h")
else()
    file(GLOB_RECURSE UGUI_KNOBS_SRC )
    file(GLOB_RECURSE UGUI_KNOBS_HEAD )
endif()

if (USE_SPINNER_MODULE)
    file(GLOB_RECURSE UGUI_SPINNER_HEAD "Framework/Modules/Spinners/*.h"
            "Framework/ThirdParty/imgui/core/imgui.cpp"
            "Framework/ThirdParty/imgui/core/imgui_draw.cpp"
            "Framework/ThirdParty/imgui/core/imgui_tables.cpp"
            "Framework/ThirdParty/imgui/core/imgui_widgets.cpp"
            "Framework/ThirdParty/imgui/misc/freetype/imgui_freetype.cpp")
else()
    file(GLOB_RECURSE UGUI_SPINNER_HEAD )
endif()

if (USE_TOGGLES_MODULE)
    file(GLOB_RECURSE UGUI_TOGGLES_SRC "Framework/Modules/Toggles/*.cpp")
    file(GLOB_RECURSE UGUI_TOGGLES_HEAD "Framework/Modules/Toggles/*.h")
else()
    file(GLOB_RECURSE UGUI_TOGGLES_SRC )
    file(GLOB_RECURSE UGUI_TOGGLES_HEAD )
endif()

if (USE_OS_MODULE)
    if (ENABLE_UEXEC)
        file(GLOB_RECURSE UGUI_UEXEC_SRC "Framework/Modules/OS/ThirdParty/uexec/*.cpp")
        file(GLOB_RECURSE UGUI_UEXEC_HEAD "Framework/Modules/OS/ThirdParty/uexec/*.hpp"
                "Framework/Modules/OS/ThirdParty/uexec/*.h")
    else()
        file(GLOB_RECURSE UGUI_UEXEC_SRC )
        file(GLOB_RECURSE UGUI_UEXEC_HEAD )
    endif()

    if (NOT WIN32)
        if (ENABLE_XDG_BASEDIR)
            file(GLOB_RECURSE UGUI_XDG_SRC "Framework/Modules/OS/ThirdParty/UntitledXDGBasedir/*.cpp")
            file(GLOB_RECURSE UGUI_XDG_HEAD "Framework/Modules/OS/ThirdParty/UntitledXDGBasedir/*.hpp"
                    "Framework/Modules/OS/ThirdParty/UntitledXDGBasedir/*.h")
        else()
            file(GLOB_RECURSE UGUI_XDG_SRC  " ")
            file(GLOB_RECURSE UGUI_XDG_HEAD  " ")
        endif()
    else()
        file(GLOB_RECURSE UGUI_XDG_SRC  " ")
        file(GLOB_RECURSE UGUI_XDG_HEAD  " ")
    endif()


    file(GLOB_RECURSE UGUI_OS_SRC ${UGUI_UEXEC_SRC} ${UGUI_XDG_SRC})
    file(GLOB_RECURSE UGUI_OS_HEAD ${UGUI_UEXEC_HEAD} ${UGUI_XDG_HEAD} )
else()
    file(GLOB_RECURSE UGUI_OS_SRC )
    file(GLOB_RECURSE UGUI_OS_HEAD )
endif()

# ----------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------- Compile binaries -------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

set(LIBRARY_SOURCES "${UGUI_SRC}" "${UGUI_HEAD}" "Generated/BuildDef.hpp" "${UGUI_IMPLOT_SRC}" "${UGUI_IMPLOT_HEAD}"
        "${UGUI_OS_SRC}" "${UGUI_OS_HEAD}" "${UGUI_TOGGLES_HEAD}" "${UGUI_TOGGLES_SRC}" "${UGUI_SPINNER_HEAD}"
        "${UGUI_KNOBS_HEAD}" "${UGUI_KNOBS_SRC}" "${UGUI_CLI_SRC}" "${UGUI_CLI_HEAD}")
set(EXECUTABLE_SOURCES "Generated/main.cpp" "${UGUI_HEAD}" "${EXEC_SRC}" "Generated/BuildDef.hpp" "${UGUI_IMPLOT_HEAD}"
        "${UGUI_OS_HEAD}" "${UGUI_TOGGLES_HEAD}" "${UGUI_SPINNER_HEAD}" "${UGUI_KNOBS_HEAD}" "${UGUI_CLI_HEAD}"
        "${UGUI_APP_HEAD}")
set(APP_LIBRARY_SOURCES "${UGUI_APP_SRC}" "${UGUI_APP_HEAD}")
if (BUILD_VARIANT_STATIC)
    if (WIN32)
        add_library(UntitledImGuiFramework STATIC "${LIBRARY_SOURCES}" "${APP_LIBRARY_SOURCES}")
    else()
        add_library(UntitledImGuiFramework STATIC "${LIBRARY_SOURCES}")
        add_library(UntitledIBusHandwritingLib STATIC ${APP_LIBRARY_SOURCES})
    endif()
    add_executable(UntitledIBusHandwriting ${EXECUTABLE_SOURCES})
else()
    if (WIN32)
        add_library(UntitledImGuiFramework SHARED ${LIBRARY_SOURCES} ${APP_LIBRARY_SOURCES})
    else()
        add_library(UntitledImGuiFramework SHARED ${LIBRARY_SOURCES})
        add_library(UntitledIBusHandwritingLib SHARED ${APP_LIBRARY_SOURCES})
    endif()
    add_executable(UntitledIBusHandwriting ${EXECUTABLE_SOURCES})
endif()

# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------- Set up linker properties ---------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

set_target_properties(UntitledImGuiFramework PROPERTIES LINKER_LANGUAGE CXX)
if (NOT WIN32)
    set_target_properties(UntitledIBusHandwritingLib PROPERTIES LINKER_LANGUAGE CXX)
endif()
set_target_properties(UntitledIBusHandwriting PROPERTIES LINKER_LANGUAGE CXX)

# ----------------------------------------------------------------------------------------------------------------------
# ------------------------------------------- Set up module compiler definitions ---------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

if (BUILD_VARIANT_STATIC)
    target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_BUILD_VARIANT_STATIC")
    if (NOT WIN32)
        target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_BUILD_VARIANT_STATIC")
    endif()
    target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_BUILD_VARIANT_STATIC")
endif()

if (BUILD_VARIANT_VENDOR)
    target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_BUILD_VARIANT_VENDOR")
    if (NOT WIN32)
        target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_BUILD_VARIANT_VENDOR")
    endif()
    target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_BUILD_VARIANT_VENDOR")
endif()

if (USE_CLI_PARSER_MODULE)
    target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_CLI_PARSER_MODULE_ENABLED" "UCLI_COMPILE_WITH_UTF_SUPPORT")
    if (NOT WIN32)
        target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_CLI_PARSER_MODULE_ENABLED"
                "UCLI_COMPILE_WITH_UTF_SUPPORT")
    endif()
    target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_CLI_PARSER_MODULE_ENABLED")
endif()

if (USE_I18N_MODULE)
    target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_I18N_MODULE_ENABLED")
    if (NOT WIN32)
        target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_I18N_MODULE_ENABLED")
    endif()
    target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_I18N_MODULE_ENABLED")
endif()

if (USE_PLOTTING_MODULE)
    target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_PLOTTING_MODULE_ENABLED")
    if (NOT WIN32)
        target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_PLOTTING_MODULE_ENABLED")
    endif()
    target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_PLOTTING_MODULE_ENABLED")
endif()

if (USE_KNOBS_MODULE)
    target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_KNOBS_MODULE_ENABLED")
    if (NOT WIN32)
        target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_KNOBS_MODULE_ENABLED")
    endif()
    target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_KNOBS_MODULE_ENABLED")
endif()

if (USE_SPINNER_MODULE)
    target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_SPINNERS_MODULE_ENABLED")
    if (NOT WIN32)
        target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_SPINNERS_MODULE_ENABLED")
    endif()
    target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_SPINNERS_MODULE_ENABLED")
endif()

if (USE_TOGGLES_MODULE)
    target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_TOGGLES_MODULE_ENABLED")
    if (NOT WIN32)
        target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_TOGGLES_MODULE_ENABLED")
    endif()
    target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_TOGGLES_MODULE_ENABLED")
endif()

if (USE_UNDO_MODULE)
    target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_UNDO_MODULE_ENABLED")
    if (NOT WIN32)
        target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_UNDO_MODULE_ENABLED")
    endif()
    target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_UNDO_MODULE_ENABLED")
endif()

if (USE_OS_MODULE)
    target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_OS_MODULE_ENABLED")
    if (NOT WIN32)
        target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_OS_MODULE_ENABLED")
    endif()
    target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_OS_MODULE_ENABLED")

    if (ENABLE_DBUS_UTILS)
        target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_DBUS_SUBMODULE_ENABLED")
        if (NOT WIN32)
            target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_DBUS_SUBMODULE_ENABLED")
        endif()
        target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_DBUS_SUBMODULE_ENABLED")
    endif()
    if (ENABLE_UEXEC)
        target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_UEXEC_SUBMODULE_ENABLED")
        if (NOT WIN32)
            target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_UEXEC_SUBMODULE_ENABLED")
        endif()
        target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_UEXEC_SUBMODULE_ENABLED")
    endif()
    if (ENABLE_THEMING)
        target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_THEME_SUBMODULE_ENABLED")
        if (NOT WIN32)
            target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_THEME_SUBMODULE_ENABLED")
        endif()
        target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_THEME_SUBMODULE_ENABLED")
    endif()
    if (ENABLE_NOTIFICATIONS)
        target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_NOTIFY_SUBMODULE_ENABLED")
        if (NOT WIN32)
            target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_NOTIFY_SUBMODULE_ENABLED")
        endif()
        target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_NOTIFY_SUBMODULE_ENABLED")
    endif()
    if (ENABLE_POLKIT_UTILS)
        target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_POLKIT_SUBMODULE_ENABLED")
        if (NOT WIN32)
            target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_POLKIT_SUBMODULE_ENABLED")
        endif()
        target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_POLKIT_SUBMODULE_ENABLED")
    endif()
    if (ENABLE_UFONT_UTILS)
        target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_UFONT_UTILS_SUBMODULE_ENABLED")
        if (NOT WIN32)
            target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "UIMGUI_UFONT_UTILS_SUBMODULE_ENABLED")
        endif()
        target_compile_definitions(UntitledIBusHandwriting PRIVATE "UIMGUI_UFONT_UTILS_SUBMODULE_ENABLED")
    endif()
    if (NOT WIN32)
        if (ENABLE_XDG_BASEDIR)
            target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_XDG_BASEDIR_SUBMODULE_ENABLED"
                    "UXDG_CREATE_DIRS" "UXDG_DO_NOT_IGNORE_RELATIVE_DIRS")
            target_compile_definitions(UntiledIBusHandwritingLib PRIVATE "UIMGUI_XDG_BASEDIR_SUBMODULE_ENABLED")
            target_compile_definitions(UntiledIBusHandwriting PRIVATE "UIMGUI_XDG_BASEDIR_SUBMODULE_ENABLED")
        endif()
    endif()
endif()

# ----------------------------------------------------------------------------------------------------------------------
# ------------------------------------------ Set up project compiler definitions ---------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

target_compile_definitions(UntitledImGuiFramework PRIVATE "UIMGUI_COMPILE_LIB" "YAML_CPP_DLL"
        "UVK_LOG_EXPORT_FROM_LIBRARY" "UVK_LIB_COMPILE" "URLL_USE_FUNCTIONAL")
if (NOT WIN32)
    target_compile_definitions(UntitledIBusHandwritingLib PRIVATE "URLL_USE_FUNCTIONAL" "UVK_LOG_EXPORT_FROM_LIBRARY")
endif()
target_compile_definitions(UntitledIBusHandwriting PRIVATE "UVK_LOG_EXPORT_FROM_LIBRARY" "URLL_USE_FUNCTIONAL")

# ----------------------------------------------------------------------------------------------------------------------
# --------------------------------------------- Link to the required libraries -----------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

if (WIN32)
    target_link_libraries(UntitledImGuiFramework ${GLFW_LIBRARIES_T} ${GLEW_LIBRARIES_T} ${OPENGL_LIBRARIES_T}
            ${YAML_CPP_LIBRARIES_T} ${FREETYPE_LIBRARIES} ${VULKAN_LIBRARIES_T})
    target_link_libraries(UntitledIBusHandwriting UntitledImGuiFramework ${YAML_CPP_LIBRARIES_T})
else()
    target_link_libraries(UntitledImGuiFramework ${GLFW_LIBRARIES_T} ${GLEW_LIBRARIES_T} ${OPENGL_LIBRARIES_T}
            ${YAML_CPP_LIBRARIES_T} ${FREETYPE_LIBRARIES} ${VULKAN_LIBRARIES_T} ${X11_LIBRARIES} util pthread dl)
    target_link_libraries(UntitledIBusHandwritingLib UntitledImGuiFramework util pthread dl ${YAML_CPP_LIBRARIES_T}
            ${IBus_LIBRARIES})
    target_link_libraries(UntitledIBusHandwriting UntitledImGuiFramework UntitledIBusHandwritingLib ${YAML_CPP_LIBRARIES_T} dl
            util)

    if (USE_OS_MODULE)
        if (ENABLE_DBUS_UTILS)
            target_link_libraries(UntitledImGuiFramework ${DBUS_LIBRARIES})
            target_link_libraries(UntitledIBusHandwritingLib ${DBUS_LIBRARIES})
        endif()
        if (ENABLE_NOTIFICATIONS)
            target_link_libraries(UntitledImGuiFramework ${DBUS_LIBRARIES})
            target_link_libraries(UntitledIBusHandwritingLib ${DBUS_LIBRARIES})
        endif()
        if (ENABLE_POLKIT_UTILS)

        endif()
        if (ENABLE_UFONT_UTILS)
            target_link_libraries(UntitledImGuiFramework Fontconfig::Fontconfig)
            target_link_libraries(UntitledIBusHandwritingLib Fontconfig::Fontconfig)
        endif()
    endif()
endif()

# ----------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------- EOF ------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------